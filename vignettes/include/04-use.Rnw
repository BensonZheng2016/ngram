\section{Using the Package}


The general process for using the \pkg{ngram} package goes something like:
\begin{enumerate}
  \item Prepare the input string; you may find the utilities in \secref{utils} useful.
  \item Tokenize with the \code{ngram()} function.
  \item Generate new text with \code{babble()}, and/or
  \item Extract pieces of the processed ngram data with the \code{get.*()} functions.
\end{enumerate}



\subsection{Creating}

Let us return to the example sequence of letters from \secref{sec:intro}.  If 
we store this string in \code{x}:
<<>>=
x <- "A B A C A B B"
@
The next step is to process with \code{ngram()}:
<<>>=
library(ngram)
ng <- ngram(x, n=2)
@
Simple as that!  And the tokenization was designed to be extremely fast; see 
\secref{sec:benchmarks} for benchmarks.



\subsection{Printing}

With \code{ng} as above, we can then inspect the sequence:
<<>>=
ng
@
If you don't have too many n-grams, you may want to print all of them by 
calling 
\code{print()} directly, with the \code{print()} argument \code{output="full"}:
<<>>=
print(ng, output="full")
@
Here we see each 3-gram, followed by its next possible ``words'' and each 
word's frequency of occurrence following the given n-gram.  So in 
the above, the first n-gram printed \code{C A} has \code{B} as a next 
possible word, because the sequence \code{C A} is only ever followed by the 
``word'' \code{B} in the input string.  On the other hand, \code{A B} is 
followed by \code{A} once and \code{B} once.  The sequence \code{B B} is 
terminal, i.e. followed by nothing; we treat this case specially.

You may just wish to see the first few n-grams; this too is possible, but
note that the order here is not particularly
informative, in that the first n-gram shown is not necessarily the most/least
common, etc.  We can achieve this with the \code{print()} argument 
\code{output="truncated"}.  However, in our example, we only have 5 n-grams,
and so we will not see any difference between printing with \code{output="full"}
versus \code{output="truncated"}.  So we will construct a slightly more
complicated example:
<<>>=
text <- rcorpus(100, alphabet=letters[1:3], maxwordlen=1)
ng2 <- ngram(text)

ng2

print(ng2, output="truncated")
@


\subsection{Summarizing}

Once the \code{ngram} representation of the text has been generated, it is very 
simple to get some interesting summary information.  The function 
\code{get.phrasetable()} generates a ``phrasetable'', or more explicitly, a 
table of n-grams, and their frequency and proportion in the text:
<<>>=
get.phrasetable(ng)
@
We can perhaps better see the value of this in a more interesting string:
<<>>=
set.seed(12345)
text <- rcorpus(100, alphabet=letters[1:3], maxwordlen=1)
text

head(get.phrasetable(ngram(text, n=3)))
@

Presently, there are two other ``getters'', namely \code{get.ngrams()} and
\code{get.string()}.  Each of these basically does what it sounds like.
The first produces the n-grams as a vector of strings, while the second
produces the input string that was used during tokenization:
<<>>=
get.ngrams(ng)
get.string(ng)
@



\subsection{Babbling}

We might want to use n-grams as god intended:  amusement.  We can easily
generate new strings with the same statistical properties as the input strings
via a very simple markov chain/sampling scheme.  We for this, we use 
\code{babble()}:
<<>>=
babble(ng, 10)
babble(ng, 10)
babble(ng, 10)
@
This generation includes a random process.  For this, we developed our own
implementation of MT19937, and so R's seed management does not apply.  To 
specify your own seed, use the \code{seed=} argument:
<<>>=
babble(ng, 10, seed=10)
babble(ng, 10, seed=10)
babble(ng, 10, seed=10)
@



\subsection{Important Notes About the Internal Representation}

The entirety of the interesting bits of the \thispackage package take place 
outside of \R (completely in \C).  Observe:
<<>>=
str(ng)
@
So everything is wrangled up top as an S4 class, and underneath the data is stored as 2 linked lists, outside the purview of \R.  This means that, for example, that you cannot save the n-gram object with a call to \code{save()}.  
If you do and you shut down and restart \R, the pointers will no longer be
valid.

Extracting a the data into a native \R data structure is not currently 
possible.  Full support is planned for a later release.  Some pieces can be extracted.  At this time, \code{get.ngrams()} and \code{get.string()} are implemented, but \code{get.nextwords()} is not.
<<eval=FALSE>>=
get.nextwords(ng)
# Error in .local(ng, ...) : Not yet implemented
@